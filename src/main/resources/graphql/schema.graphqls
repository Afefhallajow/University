scalar JSON
type Enrollment {
    id: ID!
    mark: Int
    student: Student!
    offering: CourseOffering!
}

type Student {
    id: ID!
    name: String!
    email: String!
    extra: JSON
    enrollments: [Enrollment!]!
}

type CourseOffering {
    id: ID!
    semester: SemesterEnum!
    year: Int!
    course: Course!
    teacher: Teacher
    enrollments: [Enrollment!]!
}

type Course {
    id: ID!
    code: String!
    title: String!
    tags: [String]
    metadata: JSON
}

type Teacher {
    id: ID!
    name: String!
    email: String!
    extra: JSON
}

enum SemesterEnum {
    SPRING
    FALL
}
input CourseOfferInput {
    courseId: ID!
    teacherId: ID!
    semester: SemesterEnum
    year: Int
}
type CourseOfferingResponseDTO{
    offeringId: ID!
    courseCode: String!
    teacherName: String!
    semester: SemesterEnum!
    year: Int!
}
type CourseMarkDTo {
    id: ID!
    title: String!
    code: String!
    semester: SemesterEnum!
    mark: Int
}
type StudentReportResponse {
    id: ID!
    name: String!
    gpa: Float,
    remainCourses: [CourseMarkDTo]
    marks:[CourseMarkDTo]
}
type StudentPageResponse {
    totalPages: Int!
    totalElements: Int!
    number: Int!
    data: [Student!]!
}

type TeacherPageResponse {
    totalPages: Int!
    totalElements: Int!
    number: Int!
    data: [Teacher!]!
}

type CoursePageResponse {
    totalPages: Int!
    totalElements: Int!
    number: Int!
    data: [Course!]!
}
type Query {
    allEnrollments: [Enrollment!]!
    allCourseOfferings(year: Int, semester: SemesterEnum): [CourseOfferingResponseDTO!]!
    getReport(studentId: ID!): StudentReportResponse


    allStudents(page: Int!, size: Int!): StudentPageResponse!
    allTeachers(page: Int!, size: Int!): TeacherPageResponse!
    allCourses(page: Int!, size: Int!): CoursePageResponse!

    getCourseById(id: ID!): Course!
    getTeacherById(id: ID!): Teacher!
    getStudentById(id: ID!): Student!
    getOfferById(id: ID!): CourseOfferingResponseDTO!


    getCoursesByTeacher(
        teacherId: ID!
        year: Int
        semester:  SemesterEnum): [Course!]!

    studentsByCourse(
        courseId: ID!
        semester: SemesterEnum): [Student!]!
}

type Mutation {
    enrollStudent(studentId: ID!, offeringId: ID!): Enrollment
    setMark(enrollmentId: ID!, mark: Int!): Enrollment

    # Student
    addStudent(name: String!, email: String!, extra: JSON): Student
    updateStudent(id: ID!, name: String, email: String, extra: JSON): Student
    deleteStudent(id: ID!): Boolean

    # Teacher
    addTeacher(name: String!, email: String!, extra: JSON): Teacher
    updateTeacher(id: ID!, name: String, email: String, extra: JSON): Teacher
    deleteTeacher(id: ID!): Boolean

    # Course
    addCourse(code: String!, title: String!, tags: [String], metadata: JSON): Course
    updateCourse(id: ID!, code: String, title: String, tags: [String], metadata: JSON): Course
    deleteCourse(id: ID!): Boolean

    #Course Offer
    addOffer(input: CourseOfferInput!): CourseOfferingResponseDTO!
    updateOffer(id: ID!, input: CourseOfferInput!): CourseOfferingResponseDTO!
    deleteOffer(id: ID!): Boolean
}